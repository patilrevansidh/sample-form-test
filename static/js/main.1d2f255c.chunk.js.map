{"version":3,"sources":["Common/Constants/ActionType.js","Actions/Slide.js","Common/Constants/StringConstants.js","Views/Auth/Login/service.js","Common/Components/Error.js","Views/Auth/Login/loginForm.js","Views/Auth/Login/index.js","Views/App/Home/SlideDropdown.js","Common/Components/Slide.js","Views/App/Home/Carousel.js","Common/Components/Modal.js","Views/App/Home/SlideViewSummary.js","Views/App/Home/index.js","Config/routes.js","Reducers/Slide.js","Config/store.js","serviceWorker.js","index.js"],"names":["SET_PROFILE","SET_SLIDE_COUNT","SET_SLIDE_POSITION","TOGGLE_MODAL","toggleModal","type","INPUT_PLACEHOLDER","INPUT_LABEL","VALIDATION_ERROR","DROPDOWN_DATA","value","label","login","user","password","Promise","resolve","reject","setTimeout","invalidCredentialResponse","validCredentialResponse","success","data","loggedIn","message","Error","className","Login","handleLogin","payload","a","setFormValues","props","onLogin","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","name","setFieldsValue","this","getFieldDecorator","getFieldValue","loading","serverError","onSubmit","Item","rules","required","placeholder","hasFeedback","Password","htmlType","block","React","Component","LoginForm","Form","create","LoginPage","connect","dispatchEvent","setProfileStatus","history","push","Option","Select","SlideDropdown","onPositionChange","slidePosition","slideCount","onSlideSelection","optionalProps","gutter","md","xs","key","onChange","map","item","Group","style","marginBottom","Button","Slide","CarouselView","currentCount","slideToBeDisplay","slice","autoplay","dotPosition","SlidePlaceHolder","Modal","children","rest","console","log","SlideSummary","state","viewedSlides","showSummary","visible","onCancel","title","footer","num","SlideList","handleSlideSelection","setSlideCount","handlePositionChange","target","setSlidePosition","handleFinish","isLoggedIn","to","disabled","onClick","size","SlideViews","Routes","exact","path","component","initialState","store","createStore","action","stateValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d2f255c.chunk.js","sourcesContent":["export const SET_PROFILE = 'SET_PROFILE';\nexport const SET_SLIDE_COUNT = 'SET_SLIDE_COUNT';\nexport const SET_SLIDE_POSITION = 'SET_SLIDE_POSITION';\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL';","import {\n  SET_PROFILE, SET_SLIDE_POSITION, SET_SLIDE_COUNT, TOGGLE_MODAL\n} from '../Common/Constants/ActionType';\n\nexport function setProfileStatus() {\n  return { type: SET_PROFILE };\n}\n\nexport function setSlidePosition(slidePosition) {\n  return { type: SET_SLIDE_POSITION, slidePosition };\n}\n\n\nexport function setSlideCount(slideCount) {\n  return { type: SET_SLIDE_COUNT, slideCount };\n}\n\nexport function toggleModal() {\n  return { type: TOGGLE_MODAL };\n}","export const BUTTON_LABEL = {\n  FINISH: 'Finish',\n  LOGIN: 'Login',\n  NEXT: 'Next'\n}\n\nexport const INPUT_PLACEHOLDER = {\n  USER_NAME: 'Enter User Name',\n  PASSWORD: 'Enter Password',\n  SLIDE_DROP_DOWN: 'Select Slides',\n}\n\nexport const INPUT_LABEL = {\n  USER_NAME: 'User Name',\n  PASSWORD: 'Password',\n  SLIDE_SUMMARY: 'Slide View Summary'\n}\n\nexport const VALIDATION_ERROR = {\n  USER_NAME: 'Please input your user name!',\n  PASSWORD: 'Please input your password!',\n  SLIDE: 'Please Select Slide Count!'\n}\n\nexport const SLIDE_POSITION = {\n  TOP: 'top',\n  BOTTOM: 'bottom',\n  LEFT: 'left',\n  RIGHT: 'right'\n}\n\nexport const DROPDOWN_DATA = [\n  { value: 1, label: 'One' },\n  { value: 2, label: 'Two' },\n  { value: 3, label: 'Three' },\n  { value: 4, label: 'Four' },\n  { value: 5, label: 'Five' },\n  { value: 6, label: 'Six' },\n  { value: 7, label: 'Seven' },\n  { value: 8, label: 'Eight' },\n  { value: 9, label: 'Nine' },\n  { value: 10, label: 'Ten' },\n  { value: 11, label: 'Eleven' },\n  { value: 12, label: 'Twelve' },\n  { value: 13, label: 'Thirteenth' },\n  { value: 14, label: 'FourTeenth' },\n  { value: 15, label: 'Fifteenth' },\n  { value: 16, label: 'Sixteenth' },\n  { value: 17, label: 'Seventeenth' },\n  { value: 18, label: 'Eightteenth' },\n  { value: 19, label: 'Nineteenth' },\n  { value: 20, label: 'Twentyteenth' },\n]","export function login({ user, password }) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (user === 'shaadi' && password == '123') {\n        resolve(validCredentialResponse);\n        return;\n      }\n      reject(invalidCredentialResponse)\n    }, 1000);\n  })\n\n}\n\nconst validCredentialResponse = {\n  success: true,\n  data: {\n    user: 'shaadi', loggedIn: true\n  }\n}\n\nconst invalidCredentialResponse = {\n  success: false,\n  message: 'Wrong User/Password'\n}","import React from 'react';\n\nexport const Error = ({ message }) => <div className='has-error'>\n  <div className='ant-form-explain'>\n    {message}\n  </div>\n</div>;","import { Button, Form, Input } from 'antd';\nimport React from 'react';\nimport { INPUT_PLACEHOLDER, INPUT_LABEL, VALIDATION_ERROR } from '../../../Common/Constants/StringConstants';\nimport { login } from './service';\nimport { Error } from '../../../Common/Components/Error';\n\nclass Login extends React.Component {\n  /**\n   *  Instead of using state or hooks, writing for validattion, \n   *  tried Antd's Form Decoratio which is similar to Reduxform.\n   *   \n   */\n  handleLogin = async (payload) => {\n    \n    try {\n      this.setFormValues('loading', true)\n      await login(payload)\n      this.setFormValues('loading', false);     \n      this.props.onLogin();\n    } catch (error) {\n      this.setFormValues('loading', false);\n      this.setFormValues('error', error.message);\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.handleLogin(values)\n      }\n    });\n  }\n\n  setFormValues = (name, value) => {\n    const payload = { [name]: value };\n    this.props.form.setFieldsValue(payload);\n  }\n\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    const loading = getFieldValue('loading');\n    const serverError = getFieldValue('error')\n    return (\n      <div className='login-container'>\n        <div className='form-container'>\n          <div className='form-title'>\n            <h2> Login </h2>\n          </div>\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Item label={INPUT_LABEL.USER_NAME}>\n              {getFieldDecorator('user', {\n                rules: [\n                  {\n                    required: true,\n                    message: VALIDATION_ERROR.PASSWORD,\n                  },\n                ],\n              })(\n                <Input placeholder={INPUT_PLACEHOLDER.USER_NAME} />\n              )}\n            </Form.Item>\n            <Form.Item label={INPUT_LABEL.PASSWORD} hasFeedback>\n              {getFieldDecorator('password', {\n                rules: [\n                  {\n                    required: true,\n                    message: VALIDATION_ERROR.PASSWORD,\n                  }\n                ],\n              })(\n                <Input.Password placeholder={INPUT_PLACEHOLDER.PASSWORD} />\n              )}\n            </Form.Item>\n            <Form.Item >\n              {getFieldDecorator('error', {\n              })(\n                serverError && <Error message={serverError} /> || <div />\n              )}\n            </Form.Item>\n            <Form.Item >\n              {getFieldDecorator('loading', {\n              })(\n                <Button type=\"primary\" htmlType=\"submit\" block loading={loading}>\n                  Login\n                </Button>\n              )}\n            </Form.Item>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LoginForm = Form.create({ name: 'login' })(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setProfileStatus } from '../../../Actions/Slide';\nimport './login.scss';\nimport { LoginForm } from './loginForm';\n\nconst Login = (props) => {\n  const handleLoginSuccess = () => {\n    props.setProfileStatus()\n    props.history.push('/');\n  };\n\n  // render() {\n  return (\n    <LoginForm onLogin={handleLoginSuccess} />\n  );\n  // }\n}\n\nconst mapDispatchToProps = dispatchEvent => {\n  return {\n    setProfileStatus: () => dispatchEvent(setProfileStatus())\n  }\n}\nexport const LoginPage = connect(null, mapDispatchToProps)(Login)","import { Col, Row, Select, Radio } from 'antd';\nimport React from 'react';\nimport { DROPDOWN_DATA, INPUT_PLACEHOLDER } from '../../../Common/Constants/StringConstants';\n\nconst { Option } = Select;\n/**\n * \n * Instead of using loop used DROPDOWN_DATA this could be used api data or can be any array of data in future.\n * Only replacing single Slide item will work then.\n */\n\nexport const SlideDropdown = ({ onPositionChange, slidePosition, slideCount, onSlideSelection }) => {\n  const optionalProps = slideCount && { value: slideCount } || {}\n  return <Row gutter={24}>\n    <Col md={12} xs={24} key={`${slideCount}selcted`}>\n      <Select {...optionalProps} placeholder={INPUT_PLACEHOLDER.SLIDE_DROP_DOWN} onChange={onSlideSelection}>\n        {\n          DROPDOWN_DATA.map(item => {\n            return <Option value={item.value}>{item.value}</Option>\n          })\n        }\n      </Select>\n    </Col>\n    <Col md={12} xs={24}>\n      <Radio.Group\n        onChange={onPositionChange}\n        value={slidePosition}\n        style={{ marginBottom: 8 }}\n      >\n        <Radio.Button value=\"top\">Top</Radio.Button>\n        <Radio.Button value=\"bottom\">Bottom</Radio.Button>\n        <Radio.Button value=\"left\">Left</Radio.Button>\n        <Radio.Button value=\"right\">Right</Radio.Button>\n      </Radio.Group>\n    </Col>\n  </Row>\n}","import React from 'react';\n\nexport const Slide = ({ label }) => <div>\n  <h3>{label}</h3>\n</div>;","import React from 'react';\nimport { DROPDOWN_DATA } from '../../../Common/Constants/StringConstants';\nimport { Carousel } from 'antd';\nimport { Slide } from '../../../Common/Components/Slide';\n\nexport const CarouselView = ({ slidePosition, currentCount }) => {\n  if (!currentCount) return <SlidePlaceHolder />\n  const slideToBeDisplay = DROPDOWN_DATA.slice(0, currentCount);\n  return (\n    <Carousel autoplay={true} dotPosition={slidePosition}>\n      {\n        slideToBeDisplay.map(item =>\n          <Slide label={item.label} />\n        )\n      }\n    </Carousel>\n  )\n}\n\n\nconst SlidePlaceHolder = () => <div className='no-slide'>\n  Please Selected Slides\n</div>","import React from 'react';\nimport { Modal as Antd } from 'antd';\n\n// wrapper component to change any time;\n\nexport const Modal = ({ children, ...rest }) => {\n  console.log('rest',rest)\n  return <Antd {...rest}>\n    {children}\n  </Antd>\n}","import React from 'react';\nimport { Modal } from '../../../Common/Components/Modal';\nimport { connect } from 'react-redux';\nimport { INPUT_LABEL } from '../../../Common/Constants/StringConstants';\nimport { toggleModal } from '../../../Actions/Slide';\n/**\n * Functional Component but like smart component instead of like other component redux HOC directly written here\n * \n */\nconst Summary = ({ toggleModal, viewedSlides, showSummary }) => {\n  return <Modal visible={showSummary}\n    onCancel={()=>toggleModal()}\n    title={INPUT_LABEL.SLIDE_SUMMARY} footer={null}>\n    <div className='view-summary'>\n      Here is Summary of Slide View\n          <ul>\n        {\n          viewedSlides.map(num => <li>{num}</li>)\n        }\n      </ul>\n    </div>\n  </Modal>;\n}\nconst mapStateToProps = state => {\n  console.log('** Sumary',state)\n  return {\n    viewedSlides: state.viewedSlides,\n    showSummary: state.showSummary,\n  }\n}\n\nconst mapDispatchToProps = dispatchEvent => {\n  return {\n    toggleModal: () => dispatchEvent(toggleModal()),\n  }\n}\nexport const SlideSummary = connect(mapStateToProps, mapDispatchToProps)(Summary)","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { SlideDropdown } from './SlideDropdown';\nimport { setSlidePosition, setSlideCount, toggleModal } from '../../../Actions/Slide';\nimport { CarouselView } from './Carousel';\nimport { Button } from 'antd';\nimport './home.scss';\nimport { SlideSummary } from './SlideViewSummary';\n\nclass SlideList extends React.Component {\n  handleSlideSelection = (value) => this.props.setSlideCount(value);\n\n  handlePositionChange = ({ target }) => this.props.setSlidePosition(target.value);\n\n  handleFinish = () => this.props.toggleModal();\n\n  render() {\n    if (!this.props.isLoggedIn) {\n      return <Redirect to='/login' />\n    }\n    const { slidePosition, currentCount } = this.props;\n    return (\n      <div className='home-container'>\n        <div className='slide-list-container'>\n          <div className='slide-view'>\n            <SlideDropdown onPositionChange={this.handlePositionChange} slidePosition={slidePosition}\n              slideCount={currentCount} onSlideSelection={this.handleSlideSelection} />\n            <CarouselView currentCount={currentCount} slidePosition={slidePosition} />\n            <div className='finish-btn-holder'>\n              {\n                <Button disabled={!currentCount} onClick={this.handleFinish} type=\"primary\" size='large'>\n                  Finish\n                </Button>\n              }\n              <SlideSummary />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoggedIn: state.isLoggedIn,\n    slidePosition: state.slidePosition,\n    currentCount: state.currentCount,\n  }\n}\n\nconst mapDispatchToProps = dispatchEvent => {\n  return {\n    setSlidePosition: slidePosition => dispatchEvent(setSlidePosition(slidePosition)),\n    setSlideCount: slideCount => dispatchEvent(setSlideCount(slideCount)),\n    toggleModal: () => dispatchEvent(toggleModal()),\n  }\n}\n\nexport const SlideViews = connect(mapStateToProps, mapDispatchToProps)(SlideList)","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport { LoginPage } from '../Views/Auth/Login';\nimport { SlideViews } from '../Views/App/Home';\n\n\nexport const Routes = () => <div className='app-container'>\n  <Router>\n    <Switch>\n      <Route exact path='/' component={SlideViews} />\n      <Route path='/login' component={LoginPage} />\n    </Switch>\n  </Router>\n</div>;\n","import {\n  SET_PROFILE, SET_SLIDE_POSITION, SET_SLIDE_COUNT, TOGGLE_MODAL\n} from '../Common/Constants/ActionType';\nimport {\n  SLIDE_POSITION\n} from '../Common/Constants/StringConstants';\n\nconst initialState = {\n  isLoggedIn: false,\n  slidePosition: SLIDE_POSITION.TOP,\n  currentCount: null,\n  viewedSlides: [],\n  showSummary: false\n}\n\nexport const slideReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_PROFILE:\n      return { ...state, isLoggedIn: true };\n\n    case SET_SLIDE_POSITION:\n      return { ...state, slidePosition: action.slidePosition };\n\n    case SET_SLIDE_COUNT:\n      return { ...state, currentCount: action.slideCount, viewedSlides: [...state.viewedSlides, action.slideCount] };\n\n    case TOGGLE_MODAL:\n      const stateValue = state.showSummary && { ...initialState, isLoggedIn: true} || { showSummary: !state.showSummary }\n      return { ...state, ...stateValue };\n\n    default:\n      return state;\n  }\n}","import { createStore } from 'redux';\nimport { slideReducer } from '../Reducers/Slide';\n\nexport const store = createStore(slideReducer)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './Common/Styles/app.scss';\nimport { Routes } from './Config/routes';\nimport { store } from './Config/store';\nimport * as serviceWorker from './serviceWorker';\n\nconst App = () => <Provider store={store}>\n  <Routes />\n</Provider>\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}